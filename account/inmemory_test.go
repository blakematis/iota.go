package account_test

import (
	"github.com/iotaledger/iota.go/account"
	"github.com/iotaledger/iota.go/transaction"
	"github.com/iotaledger/iota.go/trinary"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"strings"
)

var emptyAddr = strings.Repeat("9", 81)

var _ = Describe("InMemory", func() {

	var zeroValBundleTrytes = []trinary.Trytes{
		
	}
	tx, err := transaction.AsTransactionObject(zeroValBundleTrytes[0])
	if err != nil {
		panic(err)
	}

	store := account.NewInMemoryStore()

	var state *account.AccountState
	It("loads correctly an empty account", func() {
		var err error
		state, err = store.LoadAccount(id)
		Expect(err).ToNot(HaveOccurred())
		Expect(state.IsNew()).To(BeTrue())
	})

	Context("AddPendingTransfer()", func() {
		It("adds the pending zero value transfer to the store", func() {
			err := store.AddPendingTransfer(id, tx.Hash, zeroValBundleTrytes)
			Expect(err).ToNot(HaveOccurred())
		})
	})

	Context("GetPendingTransfers()", func() {
		It("returns all pending transfers", func() {
			_, bndls, err := store.GetPendingTransfers(id)
			Expect(err).ToNot(HaveOccurred())
			Expect(bndls[0][0].Address).To(Equal(tx.Address))
		})
	})

	Context("AddTailHash()", func() {
		It("adds the given tail hash", func() {
			newTail := strings.Repeat("A", 81)
			err := store.AddTailHash(id, tx.Hash, newTail)
			Expect(err).ToNot(HaveOccurred())
			state, err = store.LoadAccount(id)
			Expect(err).ToNot(HaveOccurred())
			Expect(state.PendingTransfers[tx.Hash].Tails[1]).To(Equal(newTail))
		})
	})

	Context("RemovePendingTransfer()", func() {
		It("removes the given transfer", func() {
			err := store.RemovePendingTransfer(id, tx.Hash)
			Expect(err).ToNot(HaveOccurred())
			state, err = store.LoadAccount(id)
			Expect(err).ToNot(HaveOccurred())
			Expect(len(state.PendingTransfers)).To(Equal(0))
			_, bndls, err := store.GetPendingTransfers(id)
			Expect(err).ToNot(HaveOccurred())
			Expect(len(bndls)).To(Equal(0))
		})
	})
})
